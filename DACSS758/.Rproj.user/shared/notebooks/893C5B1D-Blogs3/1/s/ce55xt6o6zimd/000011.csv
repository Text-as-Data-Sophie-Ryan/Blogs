"0","#Song text"
"0","song_list <- url1 %>%"
"0","  read_html() %>%"
"0","  html_nodes(css = css_selector) %>%"
"0","  html_text()"
"0","  "
"0","#CSN song text"
"0","special_case <- url1 %>%"
"0","  read_html() %>%"
"0","  html_nodes(css = special_css) %>%"
"0","  html_text() "
"0",""
"0","#Artist list"
"0","artist_list <- url1 %>%"
"0","  read_html() %>%"
"0","  html_nodes(css = css_selector_artists) %>%"
"0","  html_text()"
"0",""
"0","#Removing a speaker, not an artist"
"0","artist_list <- artist_list[-2]"
"0",""
"0","#Defining the nested list I need"
"0","special2 <- (special_case[29:32])"
"0","flattened_songs <- paste(special2, collapse = ""\n"")"
"0",""
"0","#Adding the nested list songs to the original song list in the corresponding artist spot"
"0","song_list <- append(song_list, list(flattened_songs), after = 28)"
"0",""
"0","# Remove [edit] from the artist names"
"0","artist_list <- gsub(""\\[edit\\]"", """", artist_list)"
"0","artist_list <- str_squish(artist_list)"
"0",""
"0","split_songs <- str_split(song_list, ""\n"")"
"0",""
"0","# Clean up whitespace and remove empty rows"
"0","clean_songs <- map(split_songs, ~ str_squish(.x) %>% .[. != """"])"
"0",""
"0","# Only keep artists with corresponding song lists"
"0","# Check which artists actually have songs listed"
"0","valid_artists <- artist_list[1:length(clean_songs)]"
"0",""
"0","# Combine only valid pairs"
"0","woodstock_data <- map2("
"0","  valid_artists,"
"0","  clean_songs,"
"0","  ~ data.frame(artist = .x, song = .y, stringsAsFactors = FALSE)"
"0",") %>%"
"0","  bind_rows()"
"0",""
"0","# Display the first 10 rows"
"0","head(woodstock_data, 10)"
